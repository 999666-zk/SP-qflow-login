{"ast":null,"code":"import \"core-js/modules/es.array.concat.js\";\nimport \"core-js/modules/es.json.stringify.js\";\n// axios二次封装\nimport { https, leanflowHttps } from './index.js';\nimport { myCryptoJs, myDeCryptoJs } from '@/utils/sc.js'; // 获取pubkey\n\nvar getPubKeyApi = function getPubKeyApi() {\n  return leanflowHttps({\n    method: 'GET',\n    url: '/api/user/pubkey'\n  });\n}; // 登录\n\n\nvar loginBeforeApi = function loginBeforeApi(data) {\n  return leanflowHttps({\n    method: 'POST',\n    url: '/api/user/login',\n    data: data\n  });\n}; // 登录之后\n\n\nvar loginAfterApi = function loginAfterApi(data) {\n  return leanflowHttps({\n    method: 'POST',\n    url: '/api/user/pwd',\n    data: data\n  });\n}; // 获取token\n\n\nvar getTokenApi = function getTokenApi(data) {\n  return leanflowHttps({\n    method: 'POST',\n    url: '/api/user/login/uid',\n    data: data\n  });\n}; // ----------------------------------------------\n// 请求判断是否进行了2FA认证\n\n\nvar checkTwoFAApi = function checkTwoFAApi(data) {\n  var SCINNER = myCryptoJs(\"\".concat(JSON.stringify(data), \"-\").concat(Date.now())); // let res = myDeCryptoJs(SCINNER)\n\n  return https({\n    method: 'POST',\n    headers: {\n      sign: SCINNER // signResult:res\n\n    },\n    url: '/midware/otp/verification/login',\n    data: data\n  });\n}; // 请求判断是否进行了2FA认证\n\n\nvar checkAuthenticationApi = function checkAuthenticationApi(data) {\n  return https({\n    method: 'POST',\n    url: '/midware/otp/authentication',\n    data: data\n  });\n}; // 判断登录成功的标志\n// const loginSuccessApi = (params) => {\n//     return https({\n//         method: 'GET',\n//         url: '/midware/user/get_login_info',\n//         params\n//     });\n// };\n// loginnew 提交表单\n\n\nvar submitFormsApi = function submitFormsApi(data) {\n  return https({\n    method: 'POST',\n    url: '/midware/user/register',\n    data: data\n  });\n}; // 验证是否是已经注册的账号\n\n\nvar getAllDataApi = function getAllDataApi() {\n  return https({\n    method: 'GET',\n    url: '/midware/admin/register_data'\n  });\n}; //注册2FA\n\n\nvar checkTwoFARegisterApi = function checkTwoFARegisterApi(data) {\n  var SCINNER = myCryptoJs(\"\".concat(JSON.stringify(data), \"-\").concat(Date.now()));\n  return https({\n    method: 'POST',\n    headers: {\n      sign: SCINNER\n    },\n    url: '/midware/otp/verification/register',\n    data: data\n  });\n}; // 门户\n\n\nvar reportShowApi = function reportShowApi(data) {\n  return https({\n    method: 'POST',\n    url: '/midware/admin/report_show',\n    data: data\n  });\n}; // 发送验证码\n\n\nvar sendEmailCodeApi = function sendEmailCodeApi(data) {\n  return https({\n    method: 'POST',\n    url: '/midware/admin/verification_code',\n    data: data\n  });\n}; // 重置密码\n\n\nvar changePasswordApi = function changePasswordApi(data) {\n  return https({\n    method: 'POST',\n    url: '/midware/admin/update_user_password',\n    data: data\n  });\n}; // login 富文本\n\n\nvar getNoticeApi = function getNoticeApi(data) {\n  return https({\n    method: 'GET',\n    url: '/midware/admin/login_data'\n  });\n};\n\nexport { getPubKeyApi, checkTwoFAApi, checkAuthenticationApi, loginBeforeApi, loginAfterApi, getTokenApi, submitFormsApi, getAllDataApi, checkTwoFARegisterApi, reportShowApi, sendEmailCodeApi, changePasswordApi, getNoticeApi };","map":{"version":3,"names":["https","leanflowHttps","myCryptoJs","myDeCryptoJs","getPubKeyApi","method","url","loginBeforeApi","data","loginAfterApi","getTokenApi","checkTwoFAApi","SCINNER","JSON","stringify","Date","now","headers","sign","checkAuthenticationApi","submitFormsApi","getAllDataApi","checkTwoFARegisterApi","reportShowApi","sendEmailCodeApi","changePasswordApi","getNoticeApi"],"sources":["/Users/april/Desktop/git-lab/新加坡/qflow-login/src/api/https.js"],"sourcesContent":["// axios二次封装\nimport { https, leanflowHttps } from './index.js';\nimport { myCryptoJs,myDeCryptoJs } from '@/utils/sc.js';\n// 获取pubkey\nconst getPubKeyApi = () => {\n    return leanflowHttps({\n        method: 'GET',\n        url: '/api/user/pubkey'\n    });\n};\n\n// 登录\nconst loginBeforeApi = (data) => {\n    return leanflowHttps({\n        method: 'POST',\n        url: '/api/user/login',\n        data\n    });\n};\n\n// 登录之后\nconst loginAfterApi = (data) => {\n    return leanflowHttps({\n        method: 'POST',\n        url: '/api/user/pwd',\n        data\n    });\n};\n\n// 获取token\nconst getTokenApi = (data) => {\n    return leanflowHttps({\n        method: 'POST',\n        url: '/api/user/login/uid',\n        data\n    });\n};\n// ----------------------------------------------\n// 请求判断是否进行了2FA认证\nconst checkTwoFAApi = (data) => {\n    let SCINNER = myCryptoJs(`${JSON.stringify(data)}-${Date.now()}`);\n    // let res = myDeCryptoJs(SCINNER)\n    return https({\n        method: 'POST',\n        headers: {\n            sign: SCINNER,\n            // signResult:res\n        },\n        url: '/midware/otp/verification/login',\n        data\n    });\n};\n// 请求判断是否进行了2FA认证\nconst checkAuthenticationApi = (data) => {\n    return https({\n        method: 'POST',\n        url: '/midware/otp/authentication',\n        data\n    });\n};\n\n// 判断登录成功的标志\n// const loginSuccessApi = (params) => {\n//     return https({\n//         method: 'GET',\n//         url: '/midware/user/get_login_info',\n//         params\n//     });\n// };\n\n// loginnew 提交表单\nconst submitFormsApi = (data) => {\n    return https({\n        method: 'POST',\n        url: '/midware/user/register',\n        data\n    });\n};\n// 验证是否是已经注册的账号\nconst getAllDataApi = () => {\n    return https({\n        method: 'GET',\n        url: '/midware/admin/register_data'\n    });\n};\n\n//注册2FA\nconst checkTwoFARegisterApi = (data) => {\n    let SCINNER = myCryptoJs(`${JSON.stringify(data)}-${Date.now()}`);\n\n    return https({\n        method: 'POST',\n        headers: {\n            sign: SCINNER\n        },\n        url: '/midware/otp/verification/register',\n        data\n    });\n};\n\n// 门户\nconst reportShowApi = (data) => {\n    return https({\n        method: 'POST',\n        url: '/midware/admin/report_show',\n        data\n    });\n};\n\n// 发送验证码\nconst sendEmailCodeApi = (data) => {\n    return https({\n        method: 'POST',\n        url: '/midware/admin/verification_code',\n        data\n    });\n};\n\n// 重置密码\nconst changePasswordApi = (data) => {\n    return https({\n        method: 'POST',\n        url: '/midware/admin/update_user_password',\n        data\n    });\n};\n\n// login 富文本\nconst getNoticeApi = (data) => {\n    return https({\n        method: 'GET',\n        url: '/midware/admin/login_data'\n    });\n};\n\nexport {\n    getPubKeyApi,\n    checkTwoFAApi,\n    checkAuthenticationApi,\n    loginBeforeApi,\n    loginAfterApi,\n    getTokenApi,\n    submitFormsApi,\n    getAllDataApi,\n    checkTwoFARegisterApi,\n    reportShowApi,\n    sendEmailCodeApi,\n    changePasswordApi,\n    getNoticeApi\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}