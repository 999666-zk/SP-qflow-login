{"ast":null,"code":"import _objectSpread from \"/Users/april/Desktop/git-lab/\\u65B0\\u52A0\\u5761/qflow-login/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport \"core-js/modules/es.object.keys.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport \"core-js/modules/es.array.push.js\";\nimport countries from './countryList';\nexport default {\n  props: {\n    toFront: {\n      type: Array,\n      default: function _default() {\n        return [];\n      }\n    },\n    // 193 新加坡\n    // 43 中国\n    countryCode: {\n      type: String,\n      default: Object.keys(countries)[193],\n      validator: function validator(code) {\n        var clearCode = String(code).toLowerCase();\n        return !!countries[clearCode];\n      }\n    }\n  },\n  data: function data() {\n    return {\n      currentCode: this.countryCode,\n      hideSubMenu: true\n    };\n  },\n  computed: {\n    currentData: function currentData() {\n      return countries[this.currentCode];\n    },\n    frontCountriesArray: function frontCountriesArray() {\n      var toFrontCodes = {};\n      this.toFront.forEach(function (code) {\n        var stringCode = String(code);\n        var needObj = countries[stringCode];\n\n        if (needObj) {\n          toFrontCodes[stringCode] = needObj;\n        }\n      });\n      return toFrontCodes;\n    },\n    countriesArray: function countriesArray() {\n      var countryCopie = _objectSpread({}, countries);\n\n      this.toFront.forEach(function (code) {\n        delete countryCopie[code];\n      });\n      return countryCopie;\n    }\n  },\n  watch: {\n    countryCode: function countryCode(newCode) {\n      this.setCountry(countries[newCode]);\n    }\n  },\n  methods: {\n    setCountry: function setCountry(item) {\n      this.currentCode = item.code;\n      this.toFront.push(String(item.code));\n      this.$emit('excountry', item);\n    }\n  },\n  mounted: function mounted() {\n    this.$emit('excountry', countries[this.countryCode]);\n  }\n};","map":{"version":3,"mappings":";;;;;AAiDA;AAEA;EACAA;IACAC;MACAC,WADA;MAEAC;QACA;MACA;IAJA,CADA;IAOA;IACA;IACAC;MACAF,YADA;MAEAC,oCAFA;MAGAE,SAHA,qBAGAC,IAHA,EAGA;QACA;QACA;MACA;IANA;EATA,CADA;EAoBAC,IApBA,kBAoBA;IACA;MACAC,6BADA;MAEAC;IAFA;EAIA,CAzBA;EA2BAC;IACAC,WADA,yBACA;MACA;IACA,CAHA;IAIAC,mBAJA,iCAIA;MACA;MACA;QACA;QACA;;QAEA;UACAC;QACA;MACA,CAPA;MAQA;IACA,CAfA;IAgBAC,cAhBA,4BAgBA;MACA;;MACA;QACA;MACA,CAFA;MAGA;IACA;EAtBA,CA3BA;EAoDAC;IACAX,WADA,uBACAY,OADA,EACA;MACA;IACA;EAHA,CApDA;EA0DAC;IACAC,UADA,sBACAC,IADA,EACA;MACA;MACA;MACA;IACA;EALA,CA1DA;EAkEAC,OAlEA,qBAkEA;IACA;EACA;AApEA","names":["props","toFront","type","default","countryCode","validator","code","data","currentCode","hideSubMenu","computed","currentData","frontCountriesArray","toFrontCodes","countriesArray","watch","newCode","methods","setCountry","item","mounted"],"sourceRoot":"src/components/Country","sources":["index.vue"],"sourcesContent":["<template>\n    <div class=\"intl-tel-input allow-dropdown\">\n        <div class=\"flag-container\">\n            <div class=\"selected-flag\" :title=\"currentData.name + ': +' + currentData.dialCode\" @click=\"hideSubMenu = !hideSubMenu\">\n                <div :class=\"'iti-flag ' + currentData.code\"></div>\n                <div id=\"downs_icon\" :class=\"hideSubMenu ? 'el-icon-arrow-down' : 'el-icon-arrow-up'\"></div>\n            </div>\n            <transition name=\"fade\">\n                <ul class=\"country-list\" v-show=\"!hideSubMenu\">\n                    <li\n                        v-for=\"item in frontCountriesArray\"\n                        :key=\"item.id\"\n                        :class=\"'country ' + (item.code == currentCode ? 'highlight' : '')\"\n                        @click=\"\n                            currentCode = item.code;\n                            hideSubMenu = true;\n                            setCountry(item);\n                        \"\n                    >\n                        <div class=\"flag-box\">\n                            <div :class=\"'iti-flag ' + item.code\"></div>\n                        </div>\n                        <span class=\"country-name\">{{ item.name }}</span>\n                        <span class=\"dial-code\">+{{ item.dialCode }}</span>\n                    </li>\n                    <li class=\"divider\"></li>\n                    <li\n                        v-for=\"item in countriesArray\"\n                        :key=\"item.id\"\n                        :class=\"'country ' + (item.code == currentCode ? 'highlight' : '')\"\n                        @click=\"\n                            currentCode = item.code;\n                            hideSubMenu = true;\n                            setCountry(item);\n                        \"\n                    >\n                        <div class=\"flag-box\">\n                            <div :class=\"'iti-flag ' + item.code\"></div>\n                        </div>\n                        <span class=\"country-name\">{{ item.name }}</span>\n                        <span class=\"dial-code\">+{{ item.dialCode }}</span>\n                    </li>\n                </ul>\n            </transition>\n        </div>\n    </div>\n</template>\n\n<script>\nimport countries from './countryList';\n\nexport default {\n    props: {\n        toFront: {\n            type: Array,\n            default: () => {\n                return [];\n            }\n        },\n        // 193 新加坡\n        // 43 中国\n        countryCode: {\n            type: String,\n            default: Object.keys(countries)[193],\n            validator(code) {\n                var clearCode = String(code).toLowerCase();\n                return !!countries[clearCode];\n            }\n        }\n    },\n\n    data() {\n        return {\n            currentCode: this.countryCode,\n            hideSubMenu: true\n        };\n    },\n\n    computed: {\n        currentData() {\n            return countries[this.currentCode];\n        },\n        frontCountriesArray() {\n            const toFrontCodes = {};\n            this.toFront.forEach((code) => {\n                const stringCode = String(code);\n                const needObj = countries[stringCode];\n\n                if (needObj) {\n                    toFrontCodes[stringCode] = needObj;\n                }\n            });\n            return toFrontCodes;\n        },\n        countriesArray() {\n            const countryCopie = { ...countries };\n            this.toFront.forEach((code) => {\n                delete countryCopie[code];\n            });\n            return countryCopie;\n        }\n    },\n\n    watch: {\n        countryCode(newCode) {\n            this.setCountry(countries[newCode]);\n        }\n    },\n\n    methods: {\n        setCountry(item) {\n            this.currentCode = item.code;\n            this.toFront.push(String(item.code));\n            this.$emit('excountry', item);\n        }\n    },\n\n    mounted() {\n        this.$emit('excountry', countries[this.countryCode]);\n    }\n};\n</script>\n\n<style lang=\"scss\" scoped>\n@import 'intl.css';\n\n.intl-tel-input {\n    width: 30px;\n    height: 33px;\n    color: #666;\n    font-size: 14px;\n    .country-list {\n        width: 335px;\n        height: 400px;\n        margin-top: 2px;\n    }\n}\n \n.fade-enter-active,\n.fade-leave-active {\n    transition: opacity 0.5s;\n}\n.fade-enter, .fade-leave-to /* .fade-leave-active below version 2.1.8 */ {\n    opacity: 0;\n}\n\n#downs_icon {\n    position: absolute;\n    left: 60%;\n    top: 35%;\n    color: #c0c4cc;\n    transition: all 1s;\n}\n</style>\n"]},"metadata":{},"sourceType":"module"}