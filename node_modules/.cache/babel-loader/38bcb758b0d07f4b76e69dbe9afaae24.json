{"ast":null,"code":"// Generated by CoffeeScript 1.10.0\nvar time_estimates;\ntime_estimates = {\n  estimate_attack_times: function estimate_attack_times(guesses) {\n    var crack_times_display, crack_times_seconds, scenario, seconds;\n    crack_times_seconds = {\n      online_throttling_100_per_hour: guesses / (100 / 3600),\n      online_no_throttling_10_per_second: guesses / 10,\n      offline_slow_hashing_1e4_per_second: guesses / 1e4,\n      offline_fast_hashing_1e10_per_second: guesses / 1e10\n    };\n    crack_times_display = {};\n\n    for (scenario in crack_times_seconds) {\n      seconds = crack_times_seconds[scenario];\n      crack_times_display[scenario] = this.display_time(seconds);\n    }\n\n    return {\n      crack_times_seconds: crack_times_seconds,\n      crack_times_display: crack_times_display,\n      score: this.guesses_to_score(guesses)\n    };\n  },\n  guesses_to_score: function guesses_to_score(guesses) {\n    var DELTA;\n    DELTA = 5;\n\n    if (guesses < 1e3 + DELTA) {\n      return 0;\n    } else if (guesses < 1e6 + DELTA) {\n      return 1;\n    } else if (guesses < 1e8 + DELTA) {\n      return 2;\n    } else if (guesses < 1e10 + DELTA) {\n      return 3;\n    } else {\n      return 4;\n    }\n  },\n  display_time: function display_time(seconds) {\n    var base, century, day, display_num, display_str, hour, minute, month, ref, year;\n    minute = 60;\n    hour = minute * 60;\n    day = hour * 24;\n    month = day * 31;\n    year = month * 12;\n    century = year * 100;\n    ref = seconds < 1 ? [null, 'less than a second'] : seconds < minute ? (base = Math.round(seconds), [base, base + \" second\"]) : seconds < hour ? (base = Math.round(seconds / minute), [base, base + \" minute\"]) : seconds < day ? (base = Math.round(seconds / hour), [base, base + \" hour\"]) : seconds < month ? (base = Math.round(seconds / day), [base, base + \" day\"]) : seconds < year ? (base = Math.round(seconds / month), [base, base + \" month\"]) : seconds < century ? (base = Math.round(seconds / year), [base, base + \" year\"]) : [null, 'centuries'], display_num = ref[0], display_str = ref[1];\n\n    if (display_num != null && display_num !== 1) {\n      display_str += 's';\n    }\n\n    return display_str;\n  }\n};\nmodule.exports = time_estimates;","map":{"version":3,"mappings":";AAAA;AAAAA,iBACE;EAAAC,uBAAuB,+BAACC,OAAD;IACrB;IAAAC,sBACE;MAAAC,gCAAgCF,WAAW,MAAM,IAAjB,CAAhC;MACAG,oCAAoCH,UAAU,EAD9C;MAEAI,qCAAqCJ,UAAU,GAF/C;MAGAK,sCAAsCL,UAAU;IAHhD,CADF;IAMAM,sBAAsB,EAAtB;;IACA;;MACEA,mBAAoB,UAApB,GAAgC,KAACC,YAAD,CAAcC,OAAd,CAAhC;IADF;;WAGA;MAAAP,qBAAqBA,mBAArB;MACAK,qBAAqBA,mBADrB;MAEAG,OAAO,KAACC,gBAAD,CAAkBV,OAAlB;IAFP;EAXF;EAgBAU,kBAAkB,0BAACV,OAAD;IAChB;IAAAW,QAAQ,CAAR;;IACA,IAAGX,UAAU,MAAMW,KAAnB;aAEE;IAFF,OAGK,IAAGX,UAAU,MAAMW,KAAnB;aAEH;IAFG,OAGA,IAAGX,UAAU,MAAMW,KAAnB;aAEH;IAFG,OAGA,IAAGX,UAAU,OAAOW,KAApB;aAGH;IAHG;aAMH;;EAjCJ;EAmCAJ,cAAc,sBAACC,OAAD;IACZ;IAAAI,SAAS,EAAT;IACAC,OAAOD,SAAS,EAAhB;IACAE,MAAMD,OAAO,EAAb;IACAE,QAAQD,MAAM,EAAd;IACAE,OAAOD,QAAQ,EAAf;IACAE,UAAUD,OAAO,GAAjB;IACAE,MAAgCV,UAAU,CAAV,GAC9B,CAAC,IAAD,EAAO,oBAAP,CAD8B,GAExBA,UAAUI,MAAV,IACNO,OAAOC,IAAI,CAACC,KAAL,CAAWb,OAAX,CAAP,EACA,CAACW,IAAD,EAAUA,IAAD,GAAM,SAAf,CAFM,IAGAX,UAAUK,IAAV,IACNM,OAAOC,IAAI,CAACC,KAAL,CAAWb,UAAUI,MAArB,CAAP,EACA,CAACO,IAAD,EAAUA,IAAD,GAAM,SAAf,CAFM,IAGAX,UAAUM,GAAV,IACNK,OAAOC,IAAI,CAACC,KAAL,CAAWb,UAAUK,IAArB,CAAP,EACA,CAACM,IAAD,EAAUA,IAAD,GAAM,OAAf,CAFM,IAGAX,UAAUO,KAAV,IACNI,OAAOC,IAAI,CAACC,KAAL,CAAWb,UAAUM,GAArB,CAAP,EACA,CAACK,IAAD,EAAUA,IAAD,GAAM,MAAf,CAFM,IAGAX,UAAUQ,IAAV,IACNG,OAAOC,IAAI,CAACC,KAAL,CAAWb,UAAUO,KAArB,CAAP,EACA,CAACI,IAAD,EAAUA,IAAD,GAAM,QAAf,CAFM,IAGAX,UAAUS,OAAV,IACNE,OAAOC,IAAI,CAACC,KAAL,CAAWb,UAAUQ,IAArB,CAAP,EACA,CAACG,IAAD,EAAUA,IAAD,GAAM,OAAf,CAFM,IAIN,CAAC,IAAD,EAAO,WAAP,CArBF,EAACG,oBAAD,EAAcC,oBAAd;;IAsBA,IAAsBD,uBAAiBA,gBAAe,CAAtD;MAAAC,eAAe,GAAf;;;WACAA;EAjEF;AAAA,CADF;AAoEAC,MAAM,CAACC,OAAP,GAAiB3B,cAAjB","names":["time_estimates","estimate_attack_times","guesses","crack_times_seconds","online_throttling_100_per_hour","online_no_throttling_10_per_second","offline_slow_hashing_1e4_per_second","offline_fast_hashing_1e10_per_second","crack_times_display","display_time","seconds","score","guesses_to_score","DELTA","minute","hour","day","month","year","century","ref","base","Math","round","display_num","display_str","module","exports"],"sourceRoot":"..","sources":["src/time_estimates.coffee"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}