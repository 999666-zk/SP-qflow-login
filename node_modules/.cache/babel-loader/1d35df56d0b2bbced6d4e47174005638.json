{"ast":null,"code":"require(\"core-js/modules/es.array.push.js\");\n\nrequire(\"core-js/modules/es.array.sort.js\");\n\nrequire(\"core-js/modules/es.array.slice.js\");\n\nrequire(\"core-js/modules/es.array.unshift.js\");\n\nrequire(\"core-js/modules/es.number.constructor.js\");\n\nrequire(\"core-js/modules/es.regexp.exec.js\");\n\nrequire(\"core-js/modules/es.string.match.js\");\n\nrequire(\"core-js/modules/es.string.sub.js\");\n\n// Generated by CoffeeScript 1.10.0\nvar BRUTEFORCE_CARDINALITY, MIN_GUESSES_BEFORE_GROWING_SEQUENCE, MIN_SUBMATCH_GUESSES_MULTI_CHAR, MIN_SUBMATCH_GUESSES_SINGLE_CHAR, adjacency_graphs, calc_average_degree, k, scoring, v;\nadjacency_graphs = require('./adjacency_graphs');\n\ncalc_average_degree = function calc_average_degree(graph) {\n  var average, k, key, n, neighbors, v;\n  average = 0;\n\n  for (key in graph) {\n    neighbors = graph[key];\n\n    average += function () {\n      var len, o, results;\n      results = [];\n\n      for (o = 0, len = neighbors.length; o < len; o++) {\n        n = neighbors[o];\n\n        if (n) {\n          results.push(n);\n        }\n      }\n\n      return results;\n    }().length;\n  }\n\n  average /= function () {\n    var results;\n    results = [];\n\n    for (k in graph) {\n      v = graph[k];\n      results.push(k);\n    }\n\n    return results;\n  }().length;\n\n  return average;\n};\n\nBRUTEFORCE_CARDINALITY = 10;\nMIN_GUESSES_BEFORE_GROWING_SEQUENCE = 10000;\nMIN_SUBMATCH_GUESSES_SINGLE_CHAR = 10;\nMIN_SUBMATCH_GUESSES_MULTI_CHAR = 50;\nscoring = {\n  nCk: function nCk(n, k) {\n    var d, o, r, ref;\n\n    if (k > n) {\n      return 0;\n    }\n\n    if (k === 0) {\n      return 1;\n    }\n\n    r = 1;\n\n    for (d = o = 1, ref = k; 1 <= ref ? o <= ref : o >= ref; d = 1 <= ref ? ++o : --o) {\n      r *= n;\n      r /= d;\n      n -= 1;\n    }\n\n    return r;\n  },\n  log10: function log10(n) {\n    return Math.log(n) / Math.log(10);\n  },\n  log2: function log2(n) {\n    return Math.log(n) / Math.log(2);\n  },\n  factorial: function factorial(n) {\n    var f, i, o, ref;\n\n    if (n < 2) {\n      return 1;\n    }\n\n    f = 1;\n\n    for (i = o = 2, ref = n; 2 <= ref ? o <= ref : o >= ref; i = 2 <= ref ? ++o : --o) {\n      f *= i;\n    }\n\n    return f;\n  },\n  most_guessable_match_sequence: function most_guessable_match_sequence(password, matches, _exclude_additive) {\n    var _, bruteforce_update, guesses, k, l, len, len1, len2, lst, m, make_bruteforce_match, matches_by_j, n, o, optimal, optimal_l, optimal_match_sequence, q, ref, ref1, u, unwind, update, w;\n\n    if (_exclude_additive == null) {\n      _exclude_additive = false;\n    }\n\n    n = password.length;\n\n    matches_by_j = function () {\n      var o, ref, results;\n      results = [];\n\n      for (_ = o = 0, ref = n; 0 <= ref ? o < ref : o > ref; _ = 0 <= ref ? ++o : --o) {\n        results.push([]);\n      }\n\n      return results;\n    }();\n\n    for (o = 0, len = matches.length; o < len; o++) {\n      m = matches[o];\n      matches_by_j[m.j].push(m);\n    }\n\n    for (q = 0, len1 = matches_by_j.length; q < len1; q++) {\n      lst = matches_by_j[q];\n      lst.sort(function (m1, m2) {\n        return m1.i - m2.i;\n      });\n    }\n\n    optimal = {\n      m: function () {\n        var ref, results, u;\n        results = [];\n\n        for (_ = u = 0, ref = n; 0 <= ref ? u < ref : u > ref; _ = 0 <= ref ? ++u : --u) {\n          results.push({});\n        }\n\n        return results;\n      }(),\n      pi: function () {\n        var ref, results, u;\n        results = [];\n\n        for (_ = u = 0, ref = n; 0 <= ref ? u < ref : u > ref; _ = 0 <= ref ? ++u : --u) {\n          results.push({});\n        }\n\n        return results;\n      }(),\n      g: function () {\n        var ref, results, u;\n        results = [];\n\n        for (_ = u = 0, ref = n; 0 <= ref ? u < ref : u > ref; _ = 0 <= ref ? ++u : --u) {\n          results.push({});\n        }\n\n        return results;\n      }()\n    };\n\n    update = function (_this) {\n      return function (m, l) {\n        var competing_g, competing_l, g, k, pi, ref;\n        k = m.j;\n        pi = _this.estimate_guesses(m, password);\n\n        if (l > 1) {\n          pi *= optimal.pi[m.i - 1][l - 1];\n        }\n\n        g = _this.factorial(l) * pi;\n\n        if (!_exclude_additive) {\n          g += Math.pow(MIN_GUESSES_BEFORE_GROWING_SEQUENCE, l - 1);\n        }\n\n        ref = optimal.g[k];\n\n        for (competing_l in ref) {\n          competing_g = ref[competing_l];\n\n          if (competing_l > l) {\n            continue;\n          }\n\n          if (competing_g <= g) {\n            return;\n          }\n        }\n\n        optimal.g[k][l] = g;\n        optimal.m[k][l] = m;\n        return optimal.pi[k][l] = pi;\n      };\n    }(this);\n\n    bruteforce_update = function (_this) {\n      return function (k) {\n        var i, l, last_m, ref, results, u;\n        m = make_bruteforce_match(0, k);\n        update(m, 1);\n        results = [];\n\n        for (i = u = 1, ref = k; 1 <= ref ? u <= ref : u >= ref; i = 1 <= ref ? ++u : --u) {\n          m = make_bruteforce_match(i, k);\n          results.push(function () {\n            var ref1, results1;\n            ref1 = optimal.m[i - 1];\n            results1 = [];\n\n            for (l in ref1) {\n              last_m = ref1[l];\n              l = parseInt(l);\n\n              if (last_m.pattern === 'bruteforce') {\n                continue;\n              }\n\n              results1.push(update(m, l + 1));\n            }\n\n            return results1;\n          }());\n        }\n\n        return results;\n      };\n    }(this);\n\n    make_bruteforce_match = function (_this) {\n      return function (i, j) {\n        return {\n          pattern: 'bruteforce',\n          token: password.slice(i, +j + 1 || 9e9),\n          i: i,\n          j: j\n        };\n      };\n    }(this);\n\n    unwind = function (_this) {\n      return function (n) {\n        var candidate_g, candidate_l, g, k, l, optimal_match_sequence, ref;\n        optimal_match_sequence = [];\n        k = n - 1;\n        l = void 0;\n        g = Infinity;\n        ref = optimal.g[k];\n\n        for (candidate_l in ref) {\n          candidate_g = ref[candidate_l];\n\n          if (candidate_g < g) {\n            l = candidate_l;\n            g = candidate_g;\n          }\n        }\n\n        while (k >= 0) {\n          m = optimal.m[k][l];\n          optimal_match_sequence.unshift(m);\n          k = m.i - 1;\n          l--;\n        }\n\n        return optimal_match_sequence;\n      };\n    }(this);\n\n    for (k = u = 0, ref = n; 0 <= ref ? u < ref : u > ref; k = 0 <= ref ? ++u : --u) {\n      ref1 = matches_by_j[k];\n\n      for (w = 0, len2 = ref1.length; w < len2; w++) {\n        m = ref1[w];\n\n        if (m.i > 0) {\n          for (l in optimal.m[m.i - 1]) {\n            l = parseInt(l);\n            update(m, l + 1);\n          }\n        } else {\n          update(m, 1);\n        }\n      }\n\n      bruteforce_update(k);\n    }\n\n    optimal_match_sequence = unwind(n);\n    optimal_l = optimal_match_sequence.length;\n\n    if (password.length === 0) {\n      guesses = 1;\n    } else {\n      guesses = optimal.g[n - 1][optimal_l];\n    }\n\n    return {\n      password: password,\n      guesses: guesses,\n      guesses_log10: this.log10(guesses),\n      sequence: optimal_match_sequence\n    };\n  },\n  estimate_guesses: function estimate_guesses(match, password) {\n    var estimation_functions, guesses, min_guesses;\n\n    if (match.guesses != null) {\n      return match.guesses;\n    }\n\n    min_guesses = 1;\n\n    if (match.token.length < password.length) {\n      min_guesses = match.token.length === 1 ? MIN_SUBMATCH_GUESSES_SINGLE_CHAR : MIN_SUBMATCH_GUESSES_MULTI_CHAR;\n    }\n\n    estimation_functions = {\n      bruteforce: this.bruteforce_guesses,\n      dictionary: this.dictionary_guesses,\n      spatial: this.spatial_guesses,\n      repeat: this.repeat_guesses,\n      sequence: this.sequence_guesses,\n      regex: this.regex_guesses,\n      date: this.date_guesses\n    };\n    guesses = estimation_functions[match.pattern].call(this, match);\n    match.guesses = Math.max(guesses, min_guesses);\n    match.guesses_log10 = this.log10(match.guesses);\n    return match.guesses;\n  },\n  bruteforce_guesses: function bruteforce_guesses(match) {\n    var guesses, min_guesses;\n    guesses = Math.pow(BRUTEFORCE_CARDINALITY, match.token.length);\n\n    if (guesses === Number.POSITIVE_INFINITY) {\n      guesses = Number.MAX_VALUE;\n    }\n\n    min_guesses = match.token.length === 1 ? MIN_SUBMATCH_GUESSES_SINGLE_CHAR + 1 : MIN_SUBMATCH_GUESSES_MULTI_CHAR + 1;\n    return Math.max(guesses, min_guesses);\n  },\n  repeat_guesses: function repeat_guesses(match) {\n    return match.base_guesses * match.repeat_count;\n  },\n  sequence_guesses: function sequence_guesses(match) {\n    var base_guesses, first_chr;\n    first_chr = match.token.charAt(0);\n\n    if (first_chr === 'a' || first_chr === 'A' || first_chr === 'z' || first_chr === 'Z' || first_chr === '0' || first_chr === '1' || first_chr === '9') {\n      base_guesses = 4;\n    } else {\n      if (first_chr.match(/\\d/)) {\n        base_guesses = 10;\n      } else {\n        base_guesses = 26;\n      }\n    }\n\n    if (!match.ascending) {\n      base_guesses *= 2;\n    }\n\n    return base_guesses * match.token.length;\n  },\n  MIN_YEAR_SPACE: 20,\n  REFERENCE_YEAR: new Date().getFullYear(),\n  regex_guesses: function regex_guesses(match) {\n    var char_class_bases, year_space;\n    char_class_bases = {\n      alpha_lower: 26,\n      alpha_upper: 26,\n      alpha: 52,\n      alphanumeric: 62,\n      digits: 10,\n      symbols: 33\n    };\n\n    if (match.regex_name in char_class_bases) {\n      return Math.pow(char_class_bases[match.regex_name], match.token.length);\n    } else {\n      switch (match.regex_name) {\n        case 'recent_year':\n          year_space = Math.abs(parseInt(match.regex_match[0]) - this.REFERENCE_YEAR);\n          year_space = Math.max(year_space, this.MIN_YEAR_SPACE);\n          return year_space;\n      }\n    }\n  },\n  date_guesses: function date_guesses(match) {\n    var guesses, year_space;\n    year_space = Math.max(Math.abs(match.year - this.REFERENCE_YEAR), this.MIN_YEAR_SPACE);\n    guesses = year_space * 365;\n\n    if (match.separator) {\n      guesses *= 4;\n    }\n\n    return guesses;\n  },\n  KEYBOARD_AVERAGE_DEGREE: calc_average_degree(adjacency_graphs.qwerty),\n  KEYPAD_AVERAGE_DEGREE: calc_average_degree(adjacency_graphs.keypad),\n  KEYBOARD_STARTING_POSITIONS: function () {\n    var ref, results;\n    ref = adjacency_graphs.qwerty;\n    results = [];\n\n    for (k in ref) {\n      v = ref[k];\n      results.push(k);\n    }\n\n    return results;\n  }().length,\n  KEYPAD_STARTING_POSITIONS: function () {\n    var ref, results;\n    ref = adjacency_graphs.keypad;\n    results = [];\n\n    for (k in ref) {\n      v = ref[k];\n      results.push(k);\n    }\n\n    return results;\n  }().length,\n  spatial_guesses: function spatial_guesses(match) {\n    var L, S, U, d, guesses, i, j, o, possible_turns, q, ref, ref1, ref2, ref3, s, shifted_variations, t, u;\n\n    if ((ref = match.graph) === 'qwerty' || ref === 'dvorak') {\n      s = this.KEYBOARD_STARTING_POSITIONS;\n      d = this.KEYBOARD_AVERAGE_DEGREE;\n    } else {\n      s = this.KEYPAD_STARTING_POSITIONS;\n      d = this.KEYPAD_AVERAGE_DEGREE;\n    }\n\n    guesses = 0;\n    L = match.token.length;\n    t = match.turns;\n\n    for (i = o = 2, ref1 = L; 2 <= ref1 ? o <= ref1 : o >= ref1; i = 2 <= ref1 ? ++o : --o) {\n      possible_turns = Math.min(t, i - 1);\n\n      for (j = q = 1, ref2 = possible_turns; 1 <= ref2 ? q <= ref2 : q >= ref2; j = 1 <= ref2 ? ++q : --q) {\n        guesses += this.nCk(i - 1, j - 1) * s * Math.pow(d, j);\n      }\n    }\n\n    if (match.shifted_count) {\n      S = match.shifted_count;\n      U = match.token.length - match.shifted_count;\n\n      if (S === 0 || U === 0) {\n        guesses *= 2;\n      } else {\n        shifted_variations = 0;\n\n        for (i = u = 1, ref3 = Math.min(S, U); 1 <= ref3 ? u <= ref3 : u >= ref3; i = 1 <= ref3 ? ++u : --u) {\n          shifted_variations += this.nCk(S + U, i);\n        }\n\n        guesses *= shifted_variations;\n      }\n    }\n\n    return guesses;\n  },\n  dictionary_guesses: function dictionary_guesses(match) {\n    var reversed_variations;\n    match.base_guesses = match.rank;\n    match.uppercase_variations = this.uppercase_variations(match);\n    match.l33t_variations = this.l33t_variations(match);\n    reversed_variations = match.reversed && 2 || 1;\n    return match.base_guesses * match.uppercase_variations * match.l33t_variations * reversed_variations;\n  },\n  START_UPPER: /^[A-Z][^A-Z]+$/,\n  END_UPPER: /^[^A-Z]+[A-Z]$/,\n  ALL_UPPER: /^[^a-z]+$/,\n  ALL_LOWER: /^[^A-Z]+$/,\n  uppercase_variations: function uppercase_variations(match) {\n    var L, U, chr, i, len, o, q, ref, ref1, regex, variations, word;\n    word = match.token;\n\n    if (word.match(this.ALL_LOWER) || word.toLowerCase() === word) {\n      return 1;\n    }\n\n    ref = [this.START_UPPER, this.END_UPPER, this.ALL_UPPER];\n\n    for (o = 0, len = ref.length; o < len; o++) {\n      regex = ref[o];\n\n      if (word.match(regex)) {\n        return 2;\n      }\n    }\n\n    U = function () {\n      var len1, q, ref1, results;\n      ref1 = word.split('');\n      results = [];\n\n      for (q = 0, len1 = ref1.length; q < len1; q++) {\n        chr = ref1[q];\n\n        if (chr.match(/[A-Z]/)) {\n          results.push(chr);\n        }\n      }\n\n      return results;\n    }().length;\n\n    L = function () {\n      var len1, q, ref1, results;\n      ref1 = word.split('');\n      results = [];\n\n      for (q = 0, len1 = ref1.length; q < len1; q++) {\n        chr = ref1[q];\n\n        if (chr.match(/[a-z]/)) {\n          results.push(chr);\n        }\n      }\n\n      return results;\n    }().length;\n\n    variations = 0;\n\n    for (i = q = 1, ref1 = Math.min(U, L); 1 <= ref1 ? q <= ref1 : q >= ref1; i = 1 <= ref1 ? ++q : --q) {\n      variations += this.nCk(U + L, i);\n    }\n\n    return variations;\n  },\n  l33t_variations: function l33t_variations(match) {\n    var S, U, chr, chrs, i, o, p, possibilities, ref, ref1, subbed, unsubbed, variations;\n\n    if (!match.l33t) {\n      return 1;\n    }\n\n    variations = 1;\n    ref = match.sub;\n\n    for (subbed in ref) {\n      unsubbed = ref[subbed];\n      chrs = match.token.toLowerCase().split('');\n\n      S = function () {\n        var len, o, results;\n        results = [];\n\n        for (o = 0, len = chrs.length; o < len; o++) {\n          chr = chrs[o];\n\n          if (chr === subbed) {\n            results.push(chr);\n          }\n        }\n\n        return results;\n      }().length;\n\n      U = function () {\n        var len, o, results;\n        results = [];\n\n        for (o = 0, len = chrs.length; o < len; o++) {\n          chr = chrs[o];\n\n          if (chr === unsubbed) {\n            results.push(chr);\n          }\n        }\n\n        return results;\n      }().length;\n\n      if (S === 0 || U === 0) {\n        variations *= 2;\n      } else {\n        p = Math.min(U, S);\n        possibilities = 0;\n\n        for (i = o = 1, ref1 = p; 1 <= ref1 ? o <= ref1 : o >= ref1; i = 1 <= ref1 ? ++o : --o) {\n          possibilities += this.nCk(U + S, i);\n        }\n\n        variations *= possibilities;\n      }\n    }\n\n    return variations;\n  }\n};\nmodule.exports = scoring;","map":{"version":3,"mappings":"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","names":["adjacency_graphs","require","calc_average_degree","graph","average","results","o","n","length","k","BRUTEFORCE_CARDINALITY","MIN_GUESSES_BEFORE_GROWING_SEQUENCE","MIN_SUBMATCH_GUESSES_SINGLE_CHAR","MIN_SUBMATCH_GUESSES_MULTI_CHAR","scoring","nCk","r","d","log10","Math","log","log2","factorial","f","i","most_guessable_match_sequence","password","matches","_exclude_additive","matches_by_j","_","j","push","m","lst","sort","m1","m2","optimal","pi","g","update","l","_this","pow","ref","competing_l","competing_g","bruteforce_update","make_bruteforce_match","ref1","results1","parseInt","last_m","pattern","token","unwind","optimal_match_sequence","Infinity","candidate_g","candidate_l","unshift","optimal_l","guesses","guesses_log10","sequence","estimate_guesses","match","min_guesses","estimation_functions","bruteforce","bruteforce_guesses","dictionary","dictionary_guesses","spatial","spatial_guesses","repeat","repeat_guesses","sequence_guesses","regex","regex_guesses","date","date_guesses","call","max","Number","POSITIVE_INFINITY","MAX_VALUE","base_guesses","repeat_count","first_chr","charAt","ascending","MIN_YEAR_SPACE","REFERENCE_YEAR","getFullYear","char_class_bases","alpha_lower","alpha_upper","alpha","alphanumeric","digits","symbols","regex_name","year_space","abs","regex_match","year","separator","KEYBOARD_AVERAGE_DEGREE","qwerty","KEYPAD_AVERAGE_DEGREE","keypad","KEYBOARD_STARTING_POSITIONS","KEYPAD_STARTING_POSITIONS","s","L","t","turns","possible_turns","min","shifted_count","S","U","shifted_variations","rank","uppercase_variations","l33t_variations","reversed_variations","reversed","START_UPPER","END_UPPER","ALL_UPPER","ALL_LOWER","word","toLowerCase","q","chr","variations","l33t","chrs","split","subbed","unsubbed","p","possibilities","module","exports"],"sourceRoot":"..","sources":["src/scoring.coffee"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}