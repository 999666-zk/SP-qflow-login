{"ast":null,"code":"import _regeneratorRuntime from \"/Users/april/Desktop/git-lab/\\u65B0\\u52A0\\u5761/qflow-login/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"/Users/april/Desktop/git-lab/\\u65B0\\u52A0\\u5761/qflow-login/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.json.stringify.js\";\nimport \"core-js/modules/es.regexp.exec.js\";\nimport \"core-js/modules/es.regexp.test.js\";\nimport JSEncrypt from 'jsencrypt';\nimport DragVerify from '@/components/DragVerify.vue';\nimport { isMobile } from '@/utils/fun.js';\nimport { getPubKeyApi, checkTwoFAApi, checkAuthenticationApi, loginBeforeApi, loginAfterApi, getTokenApi } from '@/api/https.js';\nimport '../assets/css/index.css';\nexport default {\n  filters: {\n    capitalize: function capitalize(value) {\n      return value + this.$t('message.login');\n    }\n  },\n  props: {\n    allObj: Object,\n    logo_path: String,\n    styleData: Object,\n    isAdmin: Boolean\n  },\n  components: {\n    DragVerify: DragVerify\n  },\n  data: function data() {\n    return {\n      needBind: false,\n      dialogWidth: '',\n      // 滑块\n      dialogVisible: false,\n      isPass: false,\n      isFailed: false,\n      // 计时器\n      timer: null,\n      timer2: null,\n      timer3: null,\n      ruleFormData: {\n        username: '',\n        password: ''\n      },\n      EMAIL_REGEX: /^(?=.{1,254}$)(?=.{1,64}@)[a-zA-Z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-zA-Z0-9!#$%&'*+/=?^_`{|}~-]+)*@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/,\n      MOBILENUM_REGEX: /^\\d{4,11}$/,\n      pubKey: '',\n      EMAILS: '',\n      userid: '',\n      loading: true,\n      //选择状态\n      pageOneShow: null,\n      pageTwoShow: null,\n      QRCodeUrl: '',\n      CodeFormData: {\n        code: ''\n      },\n      userIdsq: '',\n      exToken: '',\n      resultUri: ''\n    };\n  },\n  computed: {\n    rules: function rules() {\n      return {\n        username: [{\n          pattern: /^\\d{4,11}$/,\n          message: this.$t('message.msgIphone'),\n          trigger: ['blur', 'change']\n        }],\n        userEmail: [{\n          pattern: /^(?=.{1,254}$)(?=.{1,64}@)[a-zA-Z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-zA-Z0-9!#$%&'*+/=?^_`{|}~-]+)*@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/,\n          message: this.$t('message.msgEmail'),\n          trigger: ['blur', 'change']\n        }],\n        otheruser: [{\n          required: true,\n          message: this.$t('message.msgOther'),\n          trigger: ['blur', 'change']\n        }],\n        password: [{\n          required: true,\n          message: this.$t('message.msgpassword'),\n          trigger: ['blur', 'change']\n        }]\n      };\n    },\n    rulesCode: function rulesCode() {\n      return {\n        code: [{\n          pattern: /^\\d{6}$/,\n          message: this.$t('message.spCodemsg'),\n          trigger: ['blur', 'change']\n        }]\n      };\n    }\n  },\n  methods: {\n    // 获取失败状态\n    sendFiledMessage: function sendFiledMessage(val) {\n      console.log(val, 'pp'); // if (val) {\n      //     this.dialogVisible = false;\n      //     this.$notify.error({\n      //         title: 'error',\n      //         message: ``,\n      //         duration: 0,\n      //         position: 'bottom-left',\n      //         showClose: true\n      //     });\n      // }\n    },\n    // 获取验证状态\n    sendMessage: function sendMessage(val) {\n      var _this = this;\n\n      return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {\n        var isPass;\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                isPass = val.isPass;\n                _this.isPass = isPass;\n                setTimeout( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n                  return _regeneratorRuntime().wrap(function _callee$(_context) {\n                    while (1) {\n                      switch (_context.prev = _context.next) {\n                        case 0:\n                          _this.dialogVisible = false;\n\n                          if (_this.allObj.userData.useQingFlowVersion <= 4.5) {\n                            _this.loginBefore();\n                          } else {\n                            _this.loginAfter();\n                          }\n\n                        case 2:\n                        case \"end\":\n                          return _context.stop();\n                      }\n                    }\n                  }, _callee);\n                })), 200);\n\n              case 3:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }))();\n    },\n    // 取消表单\n    cancelSubmitForm: function cancelSubmitForm() {\n      this.dialogVisibleTips = false;\n      this.isPass = false;\n      this.mainKey = this.mainKey + 1;\n    },\n    handleClose: function handleClose() {\n      this.dialogVisibleTips = false;\n      this.isPass = false;\n      this.mainKey = this.mainKey + 1;\n    },\n    nextPage: function nextPage() {\n      this.pageOneShow = false;\n      this.pageTwoShow = true;\n    },\n    backQrCode: function backQrCode() {\n      this.pageOneShow = false;\n      this.pageTwoShow = false;\n    },\n    // 重置密码\n    toForgetPage: function toForgetPage() {\n      this.$router.push('/repassword');\n    },\n    // 注册\n    toSignUp: function toSignUp() {\n      this.$router.push('/register');\n    },\n    // 重置表单\n    resetForm: function resetForm(formName) {\n      this.$refs[formName].resetFields();\n    },\n    // 获取pubKey\n    getPubKey: function getPubKey() {\n      var _this2 = this;\n\n      return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3() {\n        return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _context3.next = 2;\n                return getPubKeyApi().then(function (res) {\n                  var code = res.data.code;\n                  console.log(res, 'herer');\n\n                  if (code === 0) {\n                    _this2.pubKey = res.data.data.pubkey;\n                  } else {\n                    _this2.$notify.error({\n                      title: 'error',\n                      message: \"errorCode:\".concat(code),\n                      duration: 0,\n                      position: 'bottom-left',\n                      showClose: true\n                    });\n                  }\n                });\n\n              case 2:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3);\n      }))();\n    },\n    //验证token的第一次登录\n    submitFormToken: function submitFormToken(formName) {\n      var _this3 = this;\n\n      // 需要滑块验证\n      this.$refs[formName].validate(function (valid) {\n        if (valid) {\n          // 是否通过了验证\n          if (!_this3.isPass) {\n            _this3.dialogVisible = true;\n          } else {\n            _this3.dialogVisible = false;\n          }\n        }\n      });\n    },\n    // 跳转链接\n    toCodeOther: function toCodeOther() {\n      this.pageOneShow = false;\n      this.pageTwoShow = true;\n    },\n    // 验证code\n    submitCode: function submitCode(formName) {\n      var _this4 = this;\n\n      this.$refs[formName].validate(function (valid) {\n        if (valid) {\n          var code = _this4.CodeFormData.code;\n          var params = {\n            userId: _this4.userIdsq,\n            checkCode: code\n          }; // console.log(params);\n\n          _this4.checkAuthentication(params);\n        }\n      });\n    },\n    // 请求判断是否进行了2FA认证\n    checkTwoFA: function checkTwoFA() {\n      var _this5 = this;\n\n      return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4() {\n        return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                _context4.next = 2;\n                return checkTwoFAApi(JSON.stringify({\n                  userId: _this5.userIdsq\n                })).then( // await checkTwoFAApi(JSON.stringify({ userId: 'test' })).then(\n                function (res) {\n                  if (res.data.code === 0) {\n                    console.log(res.data.result);\n                    var _res$data$result = res.data.result,\n                        need2FA = _res$data$result.need2FA,\n                        needBind = _res$data$result.needBind,\n                        qrCode = _res$data$result.qrCode,\n                        uri = _res$data$result.uri;\n                    _this5.needBind = needBind;\n                    _this5.resultUri = uri;\n\n                    if (need2FA) {\n                      if (needBind) {\n                        // 需要绑定 和 验证\n                        _this5.pageOneShow = false;\n                        _this5.pageTwoShow = false;\n                        _this5.QRCodeUrl = qrCode;\n                      } else {\n                        // 不需要绑定 需要验证\n                        _this5.pageOneShow = false;\n                        _this5.pageTwoShow = true;\n                      }\n                    } else {\n                      // 其他\n                      document.cookie = _this5.styleData.qflowType + 'QflowToken=' + _this5.exToken + ';path=/;domain=.' + _this5.styleData.qflowDomain; // 在这里进行页面的成功跳转\n\n                      setTimeout(function () {\n                        window.location.href = uri;\n                      }, 2000);\n                    }\n                  } else {\n                    _this5.$notify.error({\n                      title: 'error',\n                      message: \"Message\\uFF1A\".concat(res.data.message),\n                      duration: 0,\n                      position: 'bottom-left',\n                      showClose: true\n                    });\n\n                    _this5.resetForm('ruleForm');\n                  }\n                }, function (err) {\n                  _this5.$notify.error({\n                    title: 'erros',\n                    message: \"error status:\".concat(err.response.status),\n                    duration: 0,\n                    position: 'bottom-left',\n                    showClose: true\n                  });\n                });\n\n              case 2:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4);\n      }))();\n    },\n    // 判定方式\n    checkAuthentication: function checkAuthentication(params) {\n      var _this6 = this;\n\n      return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee6() {\n        return _regeneratorRuntime().wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                _context6.next = 2;\n                return checkAuthenticationApi(JSON.stringify(params)).then( /*#__PURE__*/function () {\n                  var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee5(res) {\n                    return _regeneratorRuntime().wrap(function _callee5$(_context5) {\n                      while (1) {\n                        switch (_context5.prev = _context5.next) {\n                          case 0:\n                            if (res.data.code === 0) {\n                              // checkcode 判定成功\n                              document.cookie = _this6.styleData.qflowType + 'QflowToken=' + _this6.exToken + ';path=/;domain=.' + _this6.styleData.qflowDomain;\n\n                              _this6.$notify.success({\n                                title: 'success',\n                                message: \"2FA verification succeeded\",\n                                duration: 0,\n                                position: 'bottom-left',\n                                showClose: true\n                              }); // 跳转登录\n\n\n                              setTimeout(function () {\n                                window.location.href = _this6.resultUri;\n                              }, 2200);\n                            } else {\n                              _this6.$notify.error({\n                                title: 'error',\n                                message: \"Message:\".concat(res.data.message),\n                                duration: 0,\n                                position: 'bottom-left',\n                                showClose: true\n                              });\n\n                              _this6.resetForm('ruleForm');\n                            }\n\n                          case 1:\n                          case \"end\":\n                            return _context5.stop();\n                        }\n                      }\n                    }, _callee5);\n                  }));\n\n                  return function (_x) {\n                    return _ref2.apply(this, arguments);\n                  };\n                }(), function (err) {\n                  _this6.$notify.error({\n                    title: 'error',\n                    message: \"error status:\".concat(err.response.status),\n                    duration: 0,\n                    position: 'bottom-left',\n                    showClose: true\n                  });\n                });\n\n              case 2:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6);\n      }))();\n    },\n    // async loginSuccess() {\n    //     await loginSuccessApi({ userId: this.userIdsq }).then(\n    //         (res) => {\n    //             if (res.data.code === 0) {\n    //                 const { system, deviceType, lastLoginTime } = res.data.result;\n    //                 // 是否为首次登录\n    //                 if (lastLoginTime == null) {\n    //                     setTimeout(() => {\n    //                         this.$notify.success({\n    //                             title: 'Login Successfully',\n    //                             dangerouslyUseHTMLString: true,\n    //                             message: ` <div style=\"padding: 10px 6px;\">\n    //                                         <div><strong>Hello, Welcome To Log In :-)</strong></div>\n    //                                         <br/>\n    //                                        </div>`,\n    //                             duration: 0,\n    //                             position: 'bottom-left',\n    //                             showClose: true\n    //                         });\n    //                     }, 1000);\n    //                 } else {\n    //                     setTimeout(() => {\n    //                         this.$notify.success({\n    //                             title: 'Login Successfully',\n    //                             dangerouslyUseHTMLString: true,\n    //                             message: ` <div style=\"padding: 10px 6px;\">\n    //                                         <div>Last Your System：<span>${system}</span></div>\n    //                                         <div>Last Equipment type：<span>${deviceType}</span></div>\n    //                                         <div>Last Login Time：<span>2023-08-22 15:30:30</span></div>\n    //                                        </div>`,\n    //                             // ${lastLoginTime}\n    //                             duration: 0,\n    //                             position: 'bottom-left',\n    //                             showClose: true,\n    //                             customClass: 'spclass'\n    //                         });\n    //                     }, 1000);\n    //                 }\n    //             } else {\n    //                 this.$notify.error({\n    //                     title: 'error',\n    //                     message: `Message:${res.data.message}`,\n    //                     duration: 0,\n    //                     position: 'bottom-left',\n    //                     showClose: true\n    //                 });\n    //                 this.resetForm('ruleForm');\n    //             }\n    //         },\n    //         (err) => {\n    //             this.$notify.error({\n    //                 title: 'error',\n    //                 message: `error status:${err.response.status}`,\n    //                 duration: 0,\n    //                 position: 'bottom-left',\n    //                 showClose: true\n    //             });\n    //         }\n    //     );\n    // },\n    // 登录逻辑的兼容\n    // 4.5之前的版本 **直接换取token**\n    loginBefore: function loginBefore() {\n      var _this7 = this;\n\n      return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee7() {\n        var encryptor, rsapwd, info;\n        return _regeneratorRuntime().wrap(function _callee7$(_context7) {\n          while (1) {\n            switch (_context7.prev = _context7.next) {\n              case 0:\n                encryptor = new JSEncrypt();\n                encryptor.setPublicKey(_this7.pubKey);\n                rsapwd = encryptor.encrypt(_this7.ruleFormData.password);\n                info = null;\n\n                if (_this7.EMAIL_REGEX.test(_this7.ruleFormData.username)) {\n                  info = {\n                    email: _this7.ruleFormData.username,\n                    areaCode: '86',\n                    mobile: '',\n                    password: rsapwd\n                  };\n                } else if (_this7.MOBILENUM_REGEX.test(_this7.ruleFormData.username)) {\n                  info = {\n                    email: '',\n                    areaCode: '86',\n                    mobile: _this7.ruleFormData.username,\n                    password: rsapwd\n                  };\n                }\n\n                _context7.next = 7;\n                return loginBeforeApi(JSON.stringify(info)).then(function (res) {\n                  if (res.data.token != undefined) {\n                    // ===================edit-april-start===================\n                    // 登录;\n                    // var token = res.data.token;\n                    // document.cookie =\n                    //     this.styleData.qflowType + 'QflowToken=' + token + ';path=/;domain=.' + this.styleData.qflowDomain;\n                    // window.location.href = this.styleData.homeUrl;\n                    //  请求判断是否进行了2FA认证\n                    var _res$data = res.data,\n                        token = _res$data.token,\n                        exUserId = _res$data.userInfo.lastWsInfo.exUserId;\n                    _this7.userIdsq = exUserId;\n                    _this7.exToken = token;\n\n                    _this7.checkTwoFA(exUserId); // ===================edit-april-end===================\n\n                  } else {\n                    if (res.data.statusCode == '41110') {\n                      _this7.$notify.error({\n                        title: 'error',\n                        message: 'You have entered an invalid username or password. Please try again.',\n                        duration: 0,\n                        position: 'bottom-left',\n                        showClose: true\n                      });\n\n                      _this7.resetForm('ruleForm'); // 刷新验证码\n\n\n                      _this7.dialogVisibleTips = false;\n                      _this7.isPass = false;\n                      _this7.mainKey = _this7.mainKey + 1;\n                    } else {\n                      _this7.$notify.error({\n                        title: 'error',\n                        message: \"errorCode:\".concat(res.data.statusCode),\n                        duration: 0,\n                        position: 'bottom-left',\n                        showClose: true\n                      });\n\n                      _this7.resetForm('ruleForm');\n                    }\n                  }\n                }, function (err) {\n                  _this7.$notify.error({\n                    title: 'error',\n                    message: \"errorCode:\".concat(err.response.status),\n                    duration: 0,\n                    position: 'bottom-left',\n                    showClose: true\n                  });\n                });\n\n              case 7:\n              case \"end\":\n                return _context7.stop();\n            }\n          }\n        }, _callee7);\n      }))();\n    },\n    // 4.5之后的版本 **间接换取token**\n    loginAfter: function loginAfter() {\n      var _this8 = this;\n\n      return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee8() {\n        var encryptor, rsapwd, info;\n        return _regeneratorRuntime().wrap(function _callee8$(_context8) {\n          while (1) {\n            switch (_context8.prev = _context8.next) {\n              case 0:\n                encryptor = new JSEncrypt();\n                encryptor.setPublicKey(_this8.pubKey);\n                console.log(_this8.pubKey);\n                rsapwd = encryptor.encrypt(_this8.ruleFormData.password);\n                info = null;\n\n                if (_this8.EMAIL_REGEX.test(_this8.ruleFormData.username)) {\n                  info = {\n                    email: _this8.ruleFormData.username,\n                    areaCode: '86',\n                    mobile: '',\n                    password: rsapwd,\n                    loginType: 'email'\n                  };\n                } else if (_this8.MOBILENUM_REGEX.test(_this8.ruleFormData.username)) {\n                  info = {\n                    email: '',\n                    areaCode: '86',\n                    mobile: _this8.ruleFormData.username,\n                    password: rsapwd,\n                    loginType: 'phone'\n                  };\n                }\n\n                _context8.next = 8;\n                return loginAfterApi(JSON.stringify(info)).then(function (res) {\n                  if (res.status === 200 && res.data.code === 0) {\n                    // console.log(res.data.data);\n                    // 进行组织数据 获取token操作\n                    var secondObj = res.data.data[0];\n                    console.log(secondObj); // this.getToken(secondObj);\n                  } else {\n                    if (res.data.statusCode == '41110') {\n                      // this.$message.error(\"账号或密码输入错误\");\n                      _this8.$notify.error({\n                        title: 'error',\n                        message: 'You have entered an invalid username or password. Please try again.',\n                        duration: 0,\n                        position: 'bottom-left',\n                        showClose: true\n                      });\n\n                      _this8.resetForm('ruleForm');\n\n                      _this8.dialogVisibleTips = false;\n                      _this8.isPass = false;\n                      _this8.mainKey = _this8.mainKey + 1;\n                    } else {\n                      _this8.$notify.error({\n                        title: 'error',\n                        message: \"errorCode:\".concat(res.data.statusCode),\n                        duration: 0,\n                        position: 'bottom-left',\n                        showClose: true\n                      });\n\n                      _this8.resetForm('ruleForm');\n                    }\n                  }\n                }, function (err) {\n                  _this8.$notify.error({\n                    title: 'error',\n                    message: \"errorCode:\".concat(err.response.status),\n                    duration: 0,\n                    position: 'bottom-left',\n                    showClose: true\n                  });\n                });\n\n              case 8:\n              case \"end\":\n                return _context8.stop();\n            }\n          }\n        }, _callee8);\n      }))();\n    },\n    getToken: function getToken(obj) {\n      var _this9 = this;\n\n      return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee9() {\n        return _regeneratorRuntime().wrap(function _callee9$(_context9) {\n          while (1) {\n            switch (_context9.prev = _context9.next) {\n              case 0:\n                _context9.next = 2;\n                return getTokenApi(JSON.stringify(obj)).then(function (res) {\n                  if (res.status === 200 && res.data.code === 0) {\n                    if (res.data.data.token != undefined) {\n                      var token = res.data.token;\n                      document.cookie = _this9.styleData.qflowType + 'QflowToken=' + token + ';path=/;domain=.' + _this9.styleData.qflowDomain;\n                      window.location.href = _this9.styleData.homeUrl;\n                      console.log('token');\n                    }\n                  } else {\n                    if (res.data.statusCode == '41110') {\n                      _this9.$notify.error({\n                        title: 'error',\n                        message: 'You have entered an invalid username or password. Please try again.',\n                        duration: 0,\n                        position: 'bottom-left',\n                        showClose: true\n                      });\n\n                      _this9.resetForm('ruleForm');\n\n                      _this9.dialogVisibleTips = false;\n                      _this9.isPass = false;\n                      _this9.mainKey = _this9.mainKey + 1;\n                    } else {\n                      _this9.$notify.error({\n                        title: 'error',\n                        message: \"errorCode:\".concat(res.data.statusCode),\n                        duration: 0,\n                        position: 'bottom-left',\n                        showClose: true\n                      });\n\n                      _this9.resetForm('ruleForm');\n                    }\n                  }\n                }, function (err) {\n                  _this9.$notify.error({\n                    title: 'error',\n                    message: \"errorCode:\".concat(err.response.status),\n                    duration: 0,\n                    position: 'bottom-left',\n                    showClose: true\n                  });\n                });\n\n              case 2:\n              case \"end\":\n                return _context9.stop();\n            }\n          }\n        }, _callee9);\n      }))();\n    }\n  },\n  created: function created() {\n    if (isMobile()) {\n      // alert('移动端')\n      this.dialogWidth = '100%';\n    } else {\n      // alert(\"pc端\")\n      this.dialogWidth = '30%';\n    }\n  },\n  mounted: function mounted() {\n    // 测试存储\n    // 获取指定的userid判断自动登录还是手动登录\n    this.getPubKey();\n    this.pageOneShow = true;\n    this.pageTwoShow = false; // checkTwoFAApi(JSON.stringify({ userId: 'jindaming' }));\n    // this.checkTwoFA();\n  }\n};","map":{"version":3,"mappings":"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","names":["filters","capitalize","props","allObj","logo_path","styleData","isAdmin","components","DragVerify","data","needBind","dialogWidth","dialogVisible","isPass","isFailed","timer","timer2","timer3","ruleFormData","username","password","EMAIL_REGEX","MOBILENUM_REGEX","pubKey","EMAILS","userid","loading","pageOneShow","pageTwoShow","QRCodeUrl","CodeFormData","code","userIdsq","exToken","resultUri","computed","rules","pattern","message","trigger","userEmail","otheruser","required","rulesCode","methods","sendFiledMessage","val","console","sendMessage","setTimeout","cancelSubmitForm","handleClose","nextPage","backQrCode","toForgetPage","toSignUp","resetForm","formName","getPubKey","getPubKeyApi","title","duration","position","showClose","submitFormToken","toCodeOther","submitCode","userId","checkCode","checkTwoFA","checkTwoFAApi","document","window","checkAuthentication","params","checkAuthenticationApi","loginBefore","encryptor","rsapwd","info","email","areaCode","mobile","loginBeforeApi","res","token","exUserId","userInfo","lastWsInfo","loginAfter","loginType","loginAfterApi","getToken","obj","getTokenApi","created","mounted"],"sourceRoot":"src/components","sources":["LoginForm.vue"],"sourcesContent":["<template>\n    <!-- ===== -->\n    <div class=\"login-box\">\n        <div class=\"login-box-top-area\">\n            <div class=\"login-title\">\n                <span>Scholarship Management Gateway System</span>\n            </div>\n            <div class=\"login-top-text\">\n                <span>Log In</span>\n            </div>\n        </div>\n        <transition name=\"plus-icon\">\n            <template v-if=\"pageOneShow\">\n                <!-- <template v-if=\"false\"> -->\n                <div class=\"login-form\">\n                    <transition name=\"fade\" mode=\"out-in\">\n                        <div class=\"login-other\" v-if=\"styleData.login_type === 'sso'\">\n                            <button class=\"workwechat-login\" v-for=\"item in allObj.loginWays\" :key=\"item.SyName\">\n                                <a class=\"workwechat\" :title=\"item.WayName\" :href=\"item.WayToUrl\">\n                                    <p class=\"login-font\">\n                                        <img class=\"workwechat-img\" :src=\"item.WayImgUrl\" alt=\"\" />\n                                        {{ item.WayName | capitalize }}\n                                    </p>\n                                </a>\n                            </button>\n                        </div>\n                        <div v-else>\n                            <el-form ref=\"ruleForm\" :rules=\"rules\" class=\"demo-ruleForm\" :model=\"ruleFormData\">\n                                <el-form-item\n                                    class=\"form-items\"\n                                    :prop=\"\n                                        EMAIL_REGEX.test(ruleFormData.username)\n                                            ? 'userEmail'\n                                            : MOBILENUM_REGEX.test(ruleFormData.username)\n                                            ? 'username'\n                                            : 'otheruser'\n                                    \"\n                                >\n                                    <el-input clearable v-model=\"ruleFormData.username\" placeholder=\"Please enter your email\"></el-input>\n                                    <!-- @input=\"getEmail\" -->\n                                </el-form-item>\n                                <!-- -------------- -->\n                                <el-form-item class=\"form-items\" prop=\"password\">\n                                    <el-input\n                                        v-model=\"ruleFormData.password\"\n                                        placeholder=\"Enter password\"\n                                        show-password\n                                        clearable\n                                        @keyup.enter.native=\"submitFormToken('ruleForm')\"\n                                    >\n                                    </el-input>\n                                </el-form-item>\n                                <el-form-item v-if=\"isAdmin\">\n                                    <div id=\"text_login\">\n                                        <div class=\"forget-password\" @click=\"toForgetPage\">\n                                            <span>Forgot Password?</span>\n                                        </div>\n                                        <!-- <div class=\"forget-password\" @click=\"toRegisterPage\">\n                                            <span>Register</span>\n                                        </div> -->\n                                    </div>\n                                </el-form-item>\n                                <!-- --------- -->\n                                <el-form-item class=\"form-items\">\n                                    <div class=\"box-form-out\">\n                                        <div class=\"box-form-out-in-box\">\n                                            <div class=\"box-form-out-inner\">\n                                                <el-button class=\"btn\" @click=\"submitFormToken('ruleForm')\"><span>LOGIN</span></el-button>\n                                                <div class=\"forget-pwd\">\n                                                    <!-- <a @click=\"toRepassword\">忘记密码</a> -->\n                                                </div>\n                                            </div>\n                                        </div>\n                                    </div>\n                                </el-form-item>\n                            </el-form>\n                            <!-- 验证 -->\n                            <el-dialog\n                                title=\"Swipe And Verify\"\n                                :visible.sync=\"dialogVisible\"\n                                :width=\"dialogWidth\"\n                                :close-on-click-modal=\"false\"\n                            >\n                                <DragVerify\n                                    :message=\"{ isPass, dialogVisible, isFailed }\"\n                                    @sendMessage=\"sendMessage\"\n                                    :key=\"mainKey\"\n                                    @sendFiledMessage=\"sendFiledMessage\"\n                                />\n                            </el-dialog>\n                        </div>\n                    </transition>\n                    <div class=\"bottom-text-signup\" v-if=\"isAdmin\">\n                        <div>\n                            <p>Don’t have an account? <span @click=\"toSignUp\">Sign Up</span></p>\n                        </div>\n                    </div>\n                </div>\n            </template>\n            <template v-else-if=\"pageTwoShow\">\n                <!-- <template v-else-if=\"false\"> -->\n                <div>\n                    <el-form ref=\"ruleFormCode\" :rules=\"rulesCode\" :model=\"CodeFormData\">\n                        <div style=\"margin-bottom: -20px\">\n                            <span style=\"font-weight: 600; font-size: 16px\">2FA Code</span>\n                        </div>\n                        <el-form-item class=\"form-items\" prop=\"code\" style=\"margin-top: 40px\">\n                            <el-input\n                                v-model=\"CodeFormData.code\"\n                                :placeholder=\"$t('message.spCodemsg')\"\n                                clearable\n                                @keyup.enter.native=\"submitCode('ruleFormCode')\"\n                            >\n                            </el-input>\n                        </el-form-item>\n                        <div style=\"margin-top: 20px; margin-bottom: 10px\">\n                            <span style=\"color: grey; line-height: 18px\">{{ $t('message.codeDes') }}</span>\n                        </div>\n                        <el-form-item class=\"form-items\">\n                            <div class=\"box-form-out\">\n                                <div class=\"box-form-out-in-box\">\n                                    <div class=\"box-form-out-inner\">\n                                        <el-button v-show=\"needBind\" class=\"spbtn backbtn\" @click=\"backQrCode\">Back</el-button>\n                                        <el-button class=\"spbtn registeringbtn\" @click=\"submitCode('ruleFormCode')\"\n                                            ><span>{{ $t('message.ok') }}</span></el-button\n                                        >\n                                        <div class=\"forget-pwd\">\n                                            <!-- <a @click=\"toRepassword\">忘记密码</a> -->\n                                        </div>\n                                    </div>\n                                </div>\n                            </div>\n                        </el-form-item>\n                    </el-form>\n                </div>\n            </template>\n            <template v-else>\n                <div style=\"display: flex; justify-content: center; flex-direction: column; align-items: center\">\n                    <div>\n                        <img :src=\"QRCodeUrl\" alt=\"\" width=\"240\" />\n                    </div>\n                    <div>\n                        <p class=\"tips\">\n                            Please use\n                            <a\n                                href=\"https://play.google.com/store/apps/details?id=com.google.android.apps.authenticator2&hl=en&pli=1\"\n                                target=\"_blank\"\n                                >Google Authenticator App</a\n                            >\n                            or\n                            <a href=\"https://play.google.com/store/apps/details?id=com.azure.authenticator&hl=en_US\" target=\"_blank\"\n                                >Microsoft Authenticator App</a\n                            >\n                            Scan QR code\n                        </p>\n                        <!-- <p class=\"tips\" style=\"margin-top: 15px\">\n                            After scanning the code and binding, please jump to the verification page<a\n                                href=\"#\"\n                                target=\"_self\"\n                                class=\"spclick\"\n                                @click=\"toCodeOther\"\n                                >Click To Jump</a\n                            >\n                        </p> -->\n                        <div class=\"stepbtn\">\n                            <el-button type=\"primary\" class=\"registeringbtn\" @click=\"nextPage\">Next</el-button>\n                        </div>\n                    </div>\n                </div>\n            </template>\n        </transition>\n    </div>\n</template>\n\n<script>\nimport JSEncrypt from 'jsencrypt';\nimport DragVerify from '@/components/DragVerify.vue';\nimport { isMobile } from '@/utils/fun.js';\nimport { getPubKeyApi, checkTwoFAApi, checkAuthenticationApi, loginBeforeApi, loginAfterApi, getTokenApi } from '@/api/https.js';\nimport '../assets/css/index.css';\nexport default {\n    filters: {\n        capitalize: function (value) {\n            return value + this.$t('message.login');\n        }\n    },\n    props: {\n        allObj: Object,\n        logo_path: String,\n        styleData: Object,\n        isAdmin: Boolean\n    },\n    components: { DragVerify },\n    data() {\n        return {\n            needBind: false,\n            dialogWidth: '',\n            // 滑块\n            dialogVisible: false,\n            isPass: false,\n            isFailed: false,\n            // 计时器\n            timer: null,\n            timer2: null,\n            timer3: null,\n            ruleFormData: {\n                username: '',\n                password: ''\n            },\n\n            EMAIL_REGEX:\n                /^(?=.{1,254}$)(?=.{1,64}@)[a-zA-Z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-zA-Z0-9!#$%&'*+/=?^_`{|}~-]+)*@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/,\n            MOBILENUM_REGEX: /^\\d{4,11}$/,\n            pubKey: '',\n            EMAILS: '',\n            userid: '',\n            loading: true,\n\n            //选择状态\n            pageOneShow: null,\n            pageTwoShow: null,\n\n            QRCodeUrl: '',\n            CodeFormData: {\n                code: ''\n            },\n            userIdsq: '',\n            exToken: '',\n            resultUri: ''\n        };\n    },\n    computed: {\n        rules() {\n            return {\n                username: [\n                    {\n                        pattern: /^\\d{4,11}$/,\n                        message: this.$t('message.msgIphone'),\n                        trigger: ['blur', 'change']\n                    }\n                ],\n                userEmail: [\n                    {\n                        pattern:\n                            /^(?=.{1,254}$)(?=.{1,64}@)[a-zA-Z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-zA-Z0-9!#$%&'*+/=?^_`{|}~-]+)*@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/,\n                        message: this.$t('message.msgEmail'),\n                        trigger: ['blur', 'change']\n                    }\n                ],\n                otheruser: [\n                    {\n                        required: true,\n                        message: this.$t('message.msgOther'),\n                        trigger: ['blur', 'change']\n                    }\n                ],\n                password: [{ required: true, message: this.$t('message.msgpassword'), trigger: ['blur', 'change'] }]\n            };\n        },\n        rulesCode() {\n            return {\n                code: [\n                    {\n                        pattern: /^\\d{6}$/,\n                        message: this.$t('message.spCodemsg'),\n                        trigger: ['blur', 'change']\n                    }\n                ]\n            };\n        }\n    },\n    methods: {\n        // 获取失败状态\n        sendFiledMessage(val) {\n            console.log(val, 'pp');\n            // if (val) {\n            //     this.dialogVisible = false;\n            //     this.$notify.error({\n            //         title: 'error',\n            //         message: ``,\n            //         duration: 0,\n            //         position: 'bottom-left',\n            //         showClose: true\n            //     });\n            // }\n        },\n\n        // 获取验证状态\n        async sendMessage(val) {\n            const { isPass } = val;\n            this.isPass = isPass;\n            setTimeout(async () => {\n                this.dialogVisible = false;\n\n                if (this.allObj.userData.useQingFlowVersion <= 4.5) {\n                    this.loginBefore();\n                } else {\n                    this.loginAfter();\n                }\n            }, 200);\n        },\n\n        // 取消表单\n        cancelSubmitForm() {\n            this.dialogVisibleTips = false;\n            this.isPass = false;\n            this.mainKey = this.mainKey + 1;\n        },\n        handleClose() {\n            this.dialogVisibleTips = false;\n            this.isPass = false;\n            this.mainKey = this.mainKey + 1;\n        },\n\n        nextPage() {\n            this.pageOneShow = false;\n            this.pageTwoShow = true;\n        },\n        backQrCode() {\n            this.pageOneShow = false;\n            this.pageTwoShow = false;\n        },\n\n        // 重置密码\n        toForgetPage() {\n            this.$router.push('/repassword');\n        },\n        // 注册\n        toSignUp() {\n            this.$router.push('/register');\n        },\n        // 重置表单\n        resetForm(formName) {\n            this.$refs[formName].resetFields();\n        },\n\n        // 获取pubKey\n        async getPubKey() {\n            await getPubKeyApi().then((res) => {\n                const { code } = res.data;\n                console.log(res, 'herer');\n                if (code === 0) {\n                    this.pubKey = res.data.data.pubkey;\n                } else {\n                    this.$notify.error({\n                        title: 'error',\n                        message: `errorCode:${code}`,\n                        duration: 0,\n                        position: 'bottom-left',\n                        showClose: true\n                    });\n                }\n            });\n        },\n        //验证token的第一次登录\n        submitFormToken(formName) {\n            // 需要滑块验证\n            this.$refs[formName].validate((valid) => {\n                if (valid) {\n                    // 是否通过了验证\n                    if (!this.isPass) {\n                        this.dialogVisible = true;\n                    } else {\n                        this.dialogVisible = false;\n                    }\n                }\n            });\n        },\n        // 跳转链接\n        toCodeOther() {\n            this.pageOneShow = false;\n            this.pageTwoShow = true;\n        },\n        // 验证code\n        submitCode(formName) {\n            this.$refs[formName].validate((valid) => {\n                if (valid) {\n                    const { code } = this.CodeFormData;\n                    const params = { userId: this.userIdsq, checkCode: code };\n                    // console.log(params);\n                    this.checkAuthentication(params);\n                }\n            });\n        },\n\n        // 请求判断是否进行了2FA认证\n        async checkTwoFA() {\n            await checkTwoFAApi(JSON.stringify({ userId: this.userIdsq })).then(\n            // await checkTwoFAApi(JSON.stringify({ userId: 'test' })).then(\n                (res) => {\n                    if (res.data.code === 0) {\n                        console.log(res.data.result);\n                        const { need2FA, needBind, qrCode, uri } = res.data.result;\n                        this.needBind = needBind;\n                        this.resultUri = uri;\n                        if (need2FA) {\n                            if (needBind) {\n                                // 需要绑定 和 验证\n                                this.pageOneShow = false;\n                                this.pageTwoShow = false;\n                                this.QRCodeUrl = qrCode;\n                            } else {\n                                // 不需要绑定 需要验证\n                                this.pageOneShow = false;\n                                this.pageTwoShow = true;\n                            }\n                        } else {\n                            // 其他\n                            document.cookie =\n                                this.styleData.qflowType + 'QflowToken=' + this.exToken + ';path=/;domain=.' + this.styleData.qflowDomain;\n                            // 在这里进行页面的成功跳转\n                            setTimeout(() => {\n                                window.location.href = uri;\n                            }, 2000);\n                        }\n                    } else {\n                        this.$notify.error({\n                            title: 'error',\n                            message: `Message：${res.data.message}`,\n                            duration: 0,\n                            position: 'bottom-left',\n                            showClose: true\n                        });\n                        this.resetForm('ruleForm');\n                    }\n                },\n                (err) => {\n                    this.$notify.error({\n                        title: 'erros',\n                        message: `error status:${err.response.status}`,\n                        duration: 0,\n                        position: 'bottom-left',\n                        showClose: true\n                    });\n                }\n            );\n        },\n\n        // 判定方式\n        async checkAuthentication(params) {\n            await checkAuthenticationApi(JSON.stringify(params)).then(\n                async (res) => {\n                    if (res.data.code === 0) {\n                        // checkcode 判定成功\n                        document.cookie =\n                            this.styleData.qflowType + 'QflowToken=' + this.exToken + ';path=/;domain=.' + this.styleData.qflowDomain;\n                        this.$notify.success({\n                            title: 'success',\n                            message: `2FA verification succeeded`,\n                            duration: 0,\n                            position: 'bottom-left',\n                            showClose: true\n                        });\n                        // 跳转登录\n                        setTimeout(() => {\n                            window.location.href = this.resultUri;\n                        }, 2200);\n                    } else {\n                        this.$notify.error({\n                            title: 'error',\n                            message: `Message:${res.data.message}`,\n                            duration: 0,\n                            position: 'bottom-left',\n                            showClose: true\n                        });\n                        this.resetForm('ruleForm');\n                    }\n                },\n                (err) => {\n                    this.$notify.error({\n                        title: 'error',\n                        message: `error status:${err.response.status}`,\n                        duration: 0,\n                        position: 'bottom-left',\n                        showClose: true\n                    });\n                }\n            );\n        },\n\n        // async loginSuccess() {\n        //     await loginSuccessApi({ userId: this.userIdsq }).then(\n        //         (res) => {\n        //             if (res.data.code === 0) {\n        //                 const { system, deviceType, lastLoginTime } = res.data.result;\n        //                 // 是否为首次登录\n        //                 if (lastLoginTime == null) {\n        //                     setTimeout(() => {\n        //                         this.$notify.success({\n        //                             title: 'Login Successfully',\n        //                             dangerouslyUseHTMLString: true,\n        //                             message: ` <div style=\"padding: 10px 6px;\">\n        //                                         <div><strong>Hello, Welcome To Log In :-)</strong></div>\n        //                                         <br/>\n        //                                        </div>`,\n        //                             duration: 0,\n        //                             position: 'bottom-left',\n        //                             showClose: true\n        //                         });\n        //                     }, 1000);\n        //                 } else {\n        //                     setTimeout(() => {\n        //                         this.$notify.success({\n        //                             title: 'Login Successfully',\n        //                             dangerouslyUseHTMLString: true,\n        //                             message: ` <div style=\"padding: 10px 6px;\">\n        //                                         <div>Last Your System：<span>${system}</span></div>\n        //                                         <div>Last Equipment type：<span>${deviceType}</span></div>\n        //                                         <div>Last Login Time：<span>2023-08-22 15:30:30</span></div>\n        //                                        </div>`,\n        //                             // ${lastLoginTime}\n\n        //                             duration: 0,\n        //                             position: 'bottom-left',\n        //                             showClose: true,\n        //                             customClass: 'spclass'\n        //                         });\n        //                     }, 1000);\n        //                 }\n        //             } else {\n        //                 this.$notify.error({\n        //                     title: 'error',\n        //                     message: `Message:${res.data.message}`,\n        //                     duration: 0,\n        //                     position: 'bottom-left',\n        //                     showClose: true\n        //                 });\n        //                 this.resetForm('ruleForm');\n        //             }\n        //         },\n        //         (err) => {\n        //             this.$notify.error({\n        //                 title: 'error',\n        //                 message: `error status:${err.response.status}`,\n        //                 duration: 0,\n        //                 position: 'bottom-left',\n        //                 showClose: true\n        //             });\n        //         }\n        //     );\n        // },\n\n        // 登录逻辑的兼容\n        // 4.5之前的版本 **直接换取token**\n        async loginBefore() {\n            let encryptor = new JSEncrypt();\n            encryptor.setPublicKey(this.pubKey);\n            let rsapwd = encryptor.encrypt(this.ruleFormData.password);\n            let info = null;\n            if (this.EMAIL_REGEX.test(this.ruleFormData.username)) {\n                info = {\n                    email: this.ruleFormData.username,\n                    areaCode: '86',\n                    mobile: '',\n                    password: rsapwd\n                };\n            } else if (this.MOBILENUM_REGEX.test(this.ruleFormData.username)) {\n                info = {\n                    email: '',\n                    areaCode: '86',\n                    mobile: this.ruleFormData.username,\n                    password: rsapwd\n                };\n            }\n            await loginBeforeApi(JSON.stringify(info)).then(\n                (res) => {\n                    if (res.data.token != undefined) {\n                        // ===================edit-april-start===================\n                        // 登录;\n                        // var token = res.data.token;\n                        // document.cookie =\n                        //     this.styleData.qflowType + 'QflowToken=' + token + ';path=/;domain=.' + this.styleData.qflowDomain;\n                        // window.location.href = this.styleData.homeUrl;\n                        //  请求判断是否进行了2FA认证\n                        const {\n                            token,\n                            userInfo: {\n                                lastWsInfo: { exUserId }\n                            }\n                        } = res.data;\n                        this.userIdsq = exUserId;\n                        this.exToken = token;\n                        this.checkTwoFA(exUserId);\n                        // ===================edit-april-end===================\n                    } else {\n                        if (res.data.statusCode == '41110') {\n                            this.$notify.error({\n                                title: 'error',\n                                message: 'You have entered an invalid username or password. Please try again.',\n                                duration: 0,\n                                position: 'bottom-left',\n                                showClose: true\n                            });\n                            this.resetForm('ruleForm');\n                            // 刷新验证码\n                            this.dialogVisibleTips = false;\n                            this.isPass = false;\n                            this.mainKey = this.mainKey + 1;\n                        } else {\n                            this.$notify.error({\n                                title: 'error',\n                                message: `errorCode:${res.data.statusCode}`,\n                                duration: 0,\n                                position: 'bottom-left',\n                                showClose: true\n                            });\n                            this.resetForm('ruleForm');\n                        }\n                    }\n                },\n                (err) => {\n                    this.$notify.error({\n                        title: 'error',\n                        message: `errorCode:${err.response.status}`,\n                        duration: 0,\n                        position: 'bottom-left',\n                        showClose: true\n                    });\n                }\n            );\n        },\n\n        // 4.5之后的版本 **间接换取token**\n        async loginAfter() {\n            let encryptor = new JSEncrypt();\n            encryptor.setPublicKey(this.pubKey);\n            console.log(this.pubKey);\n            let rsapwd = encryptor.encrypt(this.ruleFormData.password);\n\n            let info = null;\n            if (this.EMAIL_REGEX.test(this.ruleFormData.username)) {\n                info = {\n                    email: this.ruleFormData.username,\n                    areaCode: '86',\n                    mobile: '',\n                    password: rsapwd,\n                    loginType: 'email'\n                };\n            } else if (this.MOBILENUM_REGEX.test(this.ruleFormData.username)) {\n                info = {\n                    email: '',\n                    areaCode: '86',\n                    mobile: this.ruleFormData.username,\n                    password: rsapwd,\n                    loginType: 'phone'\n                };\n            }\n            await loginAfterApi(JSON.stringify(info)).then(\n                (res) => {\n                    if (res.status === 200 && res.data.code === 0) {\n                        // console.log(res.data.data);\n                        // 进行组织数据 获取token操作\n                        let secondObj = res.data.data[0];\n                        console.log(secondObj);\n                        // this.getToken(secondObj);\n                    } else {\n                        if (res.data.statusCode == '41110') {\n                            // this.$message.error(\"账号或密码输入错误\");\n                            this.$notify.error({\n                                title: 'error',\n                                message: 'You have entered an invalid username or password. Please try again.',\n                                duration: 0,\n                                position: 'bottom-left',\n                                showClose: true\n                            });\n                            this.resetForm('ruleForm');\n                            this.dialogVisibleTips = false;\n                            this.isPass = false;\n                            this.mainKey = this.mainKey + 1;\n                        } else {\n                            this.$notify.error({\n                                title: 'error',\n                                message: `errorCode:${res.data.statusCode}`,\n                                duration: 0,\n                                position: 'bottom-left',\n                                showClose: true\n                            });\n                            this.resetForm('ruleForm');\n                        }\n                    }\n                },\n                (err) => {\n                    this.$notify.error({\n                        title: 'error',\n                        message: `errorCode:${err.response.status}`,\n                        duration: 0,\n                        position: 'bottom-left',\n                        showClose: true\n                    });\n                }\n            );\n        },\n\n        async getToken(obj) {\n            await getTokenApi(JSON.stringify(obj)).then(\n                (res) => {\n                    if (res.status === 200 && res.data.code === 0) {\n                        if (res.data.data.token != undefined) {\n                            var token = res.data.token;\n                            document.cookie =\n                                this.styleData.qflowType + 'QflowToken=' + token + ';path=/;domain=.' + this.styleData.qflowDomain;\n                            window.location.href = this.styleData.homeUrl;\n                            console.log('token');\n                        }\n                    } else {\n                        if (res.data.statusCode == '41110') {\n                            this.$notify.error({\n                                title: 'error',\n                                message: 'You have entered an invalid username or password. Please try again.',\n                                duration: 0,\n                                position: 'bottom-left',\n                                showClose: true\n                            });\n                            this.resetForm('ruleForm');\n                            this.dialogVisibleTips = false;\n                            this.isPass = false;\n                            this.mainKey = this.mainKey + 1;\n                        } else {\n                            this.$notify.error({\n                                title: 'error',\n                                message: `errorCode:${res.data.statusCode}`,\n                                duration: 0,\n                                position: 'bottom-left',\n                                showClose: true\n                            });\n                            this.resetForm('ruleForm');\n                        }\n                    }\n                },\n                (err) => {\n                    this.$notify.error({\n                        title: 'error',\n                        message: `errorCode:${err.response.status}`,\n                        duration: 0,\n                        position: 'bottom-left',\n                        showClose: true\n                    });\n                }\n            );\n        }\n    },\n    created() {\n        if (isMobile()) {\n            // alert('移动端')\n            this.dialogWidth = '100%';\n        } else {\n            // alert(\"pc端\")\n            this.dialogWidth = '30%';\n        }\n    },\n    mounted() {\n        // 测试存储\n        // 获取指定的userid判断自动登录还是手动登录\n        this.getPubKey();\n        this.pageOneShow = true;\n        this.pageTwoShow = false;\n        // checkTwoFAApi(JSON.stringify({ userId: 'jindaming' }));\n        // this.checkTwoFA();\n    }\n};\n</script>\n<style lang=\"scss\" scoped>\n[v-cloak] {\n    display: none;\n}\n@import '../assets/scss/PcLoginForm.scss';\n@import '../assets/scss/MobileLoginForm.scss';\n\n.stepbtn {\n    width: 100%;\n    height: max-content;\n    display: flex;\n    justify-content: flex-end;\n    margin-top: 20px;\n}\n.registeringbtn {\n    background: #fb9337;\n    border-color: #fb9337;\n    color: white;\n    transition: all 0.3s;\n    &:hover {\n        background: #ffb061;\n        border-color: #ffb061;\n        color: white;\n    }\n}\n.tips {\n    line-height: 24px;\n    a {\n        color: #fb9337;\n    }\n}\na::after {\n    content: '' !important;\n    width: 0px !important;\n}\n.backbtn {\n    transition: all 0.3s;\n    &:hover {\n        background: #fff2e5;\n        border-color: #ffb061;\n        color: #fb9337;\n    }\n}\n\n.box-form-out-inner {\n    width: 100%;\n    display: flex;\n    justify-content: flex-end;\n    margin-top: 15px;\n}\n\n::v-deep .el-input__inner {\n    transition: all 0.3s;\n}\n::v-deep .el-input__inner:hover {\n    border-color: #ffb061;\n    border-right-width: 1px !important;\n    z-index: 1;\n}\n::v-deep .el-input__inner:focus {\n    border-color: #ffb061 !important;\n    box-shadow: 0 0 0 2px #fb933733 !important;\n    border-right-width: 1px !important;\n    outline: 0 !important;\n}\n::v-deep .el-select .el-input__inner:focus {\n    border-color: #ffb061;\n    box-shadow: 0 0 0 2px #fb933733;\n    border-right-width: 1px;\n    outline: 0;\n}\n\n::v-deep .el-select-dropdown__item.hover,\n.el-select-dropdown__item:hover {\n    background-color: #f5f7fa;\n    color: #ffb061;\n}\n\n::v-deep .el-select-dropdown__item.selected {\n    color: #ffb061 !important;\n    font-weight: 700;\n}\n#imgoutbox {\n    height: 100%;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n}\n.login-title {\n    font-weight: 400;\n    font-size: 16px;\n    line-height: 36px;\n    color: #acb3bd;\n    font-family: 'PingFang SC';\n}\n.login-top-text {\n    margin-top: 4px;\n    font-family: 'PingFang SC';\n    color: #121315;\n    font-style: normal;\n    font-weight: 600;\n    font-size: 24px;\n    line-height: 36px;\n}\n.forget-password {\n    height: max-content;\n    line-height: 22px;\n    margin-top: -4px;\n    cursor: pointer;\n    span {\n        color: #fb9337;\n    }\n}\n::v-deep .el-button--text {\n    padding-bottom: 16px !important;\n}\n.bottom-text-signup {\n    text-align: center;\n    font-family: 'PingFang SC';\n    font-style: normal;\n    font-weight: 400;\n    font-size: 14px;\n    line-height: 22px;\n    color: #767e89;\n    span {\n        cursor: pointer;\n        color: #fb9337;\n    }\n}\n::v-deep .el-form-item:nth-child(3) {\n    margin-bottom: 16px;\n}\n#text_login {\n    width: 100%;\n    display: flex;\n    flex-direction: row;\n    justify-content: space-between;\n}\n::v-deep .el-dialog {\n    width: max-content !important;\n    min-width: 320px !important;\n    border-radius: 24px;\n}\n</style>\n"]},"metadata":{},"sourceType":"module"}