{"ast":null,"code":"import _regeneratorRuntime from \"/Users/april/Desktop/git-lab/\\u65B0\\u52A0\\u5761/qflow-login/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"/Users/april/Desktop/git-lab/\\u65B0\\u52A0\\u5761/qflow-login/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport \"core-js/modules/es.regexp.exec.js\";\nimport \"core-js/modules/es.string.match.js\";\nimport \"core-js/modules/es.array.sort.js\";\nimport \"core-js/modules/es.regexp.test.js\";\n\nfunction isMobile() {\n  var flag = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);\n  return flag;\n}\n\nfunction sortArrayByFirstLetter(arr) {\n  return arr.sort(function (a, b) {\n    var firstLetterA = a[0].toUpperCase();\n    var firstLetterB = b[0].toUpperCase();\n\n    if (firstLetterA < firstLetterB) {\n      return -1;\n    }\n\n    if (firstLetterA > firstLetterB) {\n      return 1;\n    }\n\n    return 0;\n  });\n} // 判断移动端是什么类型的\n\n\nfunction getTerminalType() {\n  return _getTerminalType.apply(this, arguments);\n}\n\nfunction _getTerminalType() {\n  _getTerminalType = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n    return _regeneratorRuntime().wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            if (!/(iPhone|iPad|iPod|iOS)/i.test(navigator.userAgent)) {\n              _context.next = 4;\n              break;\n            }\n\n            return _context.abrupt(\"return\", 'mobile');\n\n          case 4:\n            if (!/(Android)/i.test(navigator.userAgent)) {\n              _context.next = 8;\n              break;\n            }\n\n            return _context.abrupt(\"return\", 'mobile');\n\n          case 8:\n            return _context.abrupt(\"return\", 'pc');\n\n          case 9:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _getTerminalType.apply(this, arguments);\n}\n\nexport { isMobile, sortArrayByFirstLetter, getTerminalType };","map":{"version":3,"names":["isMobile","flag","navigator","userAgent","match","sortArrayByFirstLetter","arr","sort","a","b","firstLetterA","toUpperCase","firstLetterB","getTerminalType","test"],"sources":["/Users/april/Desktop/git-lab/新加坡/qflow-login/src/utils/fun.js"],"sourcesContent":["function isMobile() {\n    let flag = navigator.userAgent.match(\n        /(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i\n    );\n    return flag;\n}\n\nfunction sortArrayByFirstLetter(arr) {\n    return arr.sort((a, b) => {\n        const firstLetterA = a[0].toUpperCase();\n        const firstLetterB = b[0].toUpperCase();\n\n        if (firstLetterA < firstLetterB) {\n            return -1;\n        }\n        if (firstLetterA > firstLetterB) {\n            return 1;\n        }\n        return 0;\n    });\n}\n\n// 判断移动端是什么类型的\nasync function getTerminalType() {\n    if (/(iPhone|iPad|iPod|iOS)/i.test(navigator.userAgent)) {\n        return 'mobile';\n    } else if (/(Android)/i.test(navigator.userAgent)) {\n        return 'mobile';\n    } else {\n        return 'pc';\n    }\n}\n\nexport { isMobile, sortArrayByFirstLetter, getTerminalType };\n"],"mappings":";;;;;;;AAAA,SAASA,QAAT,GAAoB;EAChB,IAAIC,IAAI,GAAGC,SAAS,CAACC,SAAV,CAAoBC,KAApB,CACP,iJADO,CAAX;EAGA,OAAOH,IAAP;AACH;;AAED,SAASI,sBAAT,CAAgCC,GAAhC,EAAqC;EACjC,OAAOA,GAAG,CAACC,IAAJ,CAAS,UAACC,CAAD,EAAIC,CAAJ,EAAU;IACtB,IAAMC,YAAY,GAAGF,CAAC,CAAC,CAAD,CAAD,CAAKG,WAAL,EAArB;IACA,IAAMC,YAAY,GAAGH,CAAC,CAAC,CAAD,CAAD,CAAKE,WAAL,EAArB;;IAEA,IAAID,YAAY,GAAGE,YAAnB,EAAiC;MAC7B,OAAO,CAAC,CAAR;IACH;;IACD,IAAIF,YAAY,GAAGE,YAAnB,EAAiC;MAC7B,OAAO,CAAP;IACH;;IACD,OAAO,CAAP;EACH,CAXM,CAAP;AAYH,C,CAED;;;SACeC,e;;;;;gFAAf;IAAA;MAAA;QAAA;UAAA;YAAA,KACQ,0BAA0BC,IAA1B,CAA+BZ,SAAS,CAACC,SAAzC,CADR;cAAA;cAAA;YAAA;;YAAA,iCAEe,QAFf;;UAAA;YAAA,KAGe,aAAaW,IAAb,CAAkBZ,SAAS,CAACC,SAA5B,CAHf;cAAA;cAAA;YAAA;;YAAA,iCAIe,QAJf;;UAAA;YAAA,iCAMe,IANf;;UAAA;UAAA;YAAA;QAAA;MAAA;IAAA;EAAA,C;;;;AAUA,SAASH,QAAT,EAAmBK,sBAAnB,EAA2CQ,eAA3C"},"metadata":{},"sourceType":"module"}